package com.nishant.jobrestspringboot.repo;

import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.nishant.jobrestspringboot.model.Job;
import java.util.List;

@Repository
public interface JobRepo extends JpaRepository<Job, Integer> {
        // queries automatically generated by data Jpa
        // no need of using @Query annotation here until want to customize it
        List<Job> findByReqExperience(int reqExperience);

        List<Job> findByJobTechStack(List<String> jobTechStack);

        // use query annotation in case of custom methods
        @Query("SELECT j FROM Job j WHERE j.jobProfile = :profile ORDER BY j.reqExperience DESC")
        List<Job> findByJobProfileSortedByExperience(@Param("profile") String profile);

}

/*
 * @Repository
 * public class JobRepo {
 * private static String[] availableTechStacks = { "Java", "Python",
 * "JavaScript", "C#", "C++", "PHP", "Swift",
 * "Kotlin", "Ruby", "Go", "R", "TypeScript", "SQL", "NoSQL", "HTML", "React",
 * "Angular", "Vue.js",
 * "Node.js", "Spring Boot", "Django", "Flask", "ASP.NET", "Laravel",
 * "TensorFlow", "PyTorch",
 * "Keras", "Hadoop", "Spark", "Kafka", "Docker", "Kubernetes", "AWS", "Azure",
 * "Google Cloud",
 * "Salesforce", "Tableau", "Power BI", "Selenium", "Git", "Jenkins",
 * "Terraform" };
 * 
 * List<Job> jobs = new ArrayList<>(Arrays.asList(
 * new Job(1, "Software Engineer",
 * "Responsible for developing and maintaining software applications.", 3,
 * Arrays.asList("Java", "Spring", "Hibernate")),
 * new Job(2, "Data Scientist",
 * "Analyze and interpret complex data to help companies make decisions.", 2,
 * Arrays.asList("Python", "R", "SQL")),
 * new Job(3, "Frontend Developer",
 * "Build and maintain user interfaces for web applications.",
 * 1,
 * Arrays.asList("JavaScript", "React", "CSS")),
 * new Job(4, "Backend Developer",
 * "Develop and maintain server-side logic, database integration, and APIs.", 4,
 * Arrays.asList("Node.js", "Express", "MongoDB")),
 * new Job(5, "DevOps Engineer",
 * "Manage and automate the infrastructure and deployment processes.", 5,
 * Arrays.asList("Docker", "Kubernetes", "AWS"))));
 * 
 * public List<Job> getAllJobs() {
 * return jobs;
 * }
 * 
 * public Job getJob(int id) {
 * for (Job job : jobs) {
 * if (job.getJobId() == id)
 * return job;
 * }
 * 
 * return null;
 * }
 * 
 * public void addJob(Job job) {
 * jobs.add(job);
 * }
 * 
 * public String[] getAvailableTechStacks() {
 * return availableTechStacks;
 * }
 * 
 * public void updateJob(Job updatedJob) {
 * for (Job job : jobs) {
 * if (job.getJobId() == updatedJob.getJobId()) {
 * if (updatedJob.getJobProfile() != null)
 * job.setJobProfile(updatedJob.getJobProfile());
 * if (updatedJob.getJobDesc() != null)
 * job.setJobDesc(updatedJob.getJobDesc());
 * if (updatedJob.getReqExperience() != null)
 * job.setReqExperience(updatedJob.getReqExperience());
 * if (updatedJob.getJobTechStack() != null)
 * job.setJobTechStack(updatedJob.getJobTechStack());
 * break;
 * }
 * }
 * 
 * }
 * 
 * public void deleteJob(int jobId) {
 * for (Job job : jobs) {
 * if (job.getJobId() == jobId) {
 * jobs.remove(job);
 * break;
 * }
 * }
 * }
 * 
 * }
 */